require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/documentos", type: :request do
  let!(:documento) { create(:documento, :com_arquivo_xml) }
  let!(:documento_valido) { build(:documento, :com_arquivo_xml) }

  let(:usuario) { create(:usuario) }
  let(:valid_attributes) {
    skip("Add a hash of attributes valid for your model")
  }

  let(:invalid_attributes) {
    skip("Add a hash of attributes invalid for your model")
  }

  describe  "GET #index" do
    context "quando acessar a index" do
      it 'listar todos os documentos do usuario' do
        get documentos_url
        expect(response).to have_http_status(:success)
        expect(response.body).to include(documento.titulo)
      end
    end
  end

  describe 'GET #show' do
    context 'quando acessar a show' do
        it 'acessar documentos do usuario' do
          get documentos_url(documento)
          expect(response).to have_http_status(:success)
          expect(response.body).to include(documento.titulo)
        end
    end
  end

  describe 'GET #new' do
    context 'quando acessar a new' do
      it 'retornar pagina' do
          get new_documento_url
          expect(response).to be_successful
      end
    end
  end

  describe 'GET #edit' do
    context 'quando acessar a edit' do

      it 'retorna edit documento' do
        documento = Documento.create!(titulo: Faker::Lorem.word,
                                      usuario: usuario,
                                      arquivo: fixture_file_upload('dummy.txt', 'text/xml'))
        get edit_documento_url(documento)
        expect(response).to be_successful
      end
    end
  end

  describe 'POST #create' do
    context 'com paramêtros válidos' do
      it 'criação com todos os elementos' do

        post documentos_url, params: { documento: { titulo: Faker::Lorem.sentence,
                                                    usuario_id: usuario.id,
                                                    arquivo: fixture_file_upload('dummy.xml', 'text/xml') }
        }
        expect(response).to redirect_to(documento_url(Documento.last))
      end
    end

    context 'com parametros faltando' do
      it 'com titulo faltando' do
          post documentos_url, params: { documento: { titulo: nil,
                                               arquivo: fixture_file_upload('dummy.xml', 'text/xml'),
                                               usuario_id: usuario.id }

          }
          expect(response).to have_http_status(:unprocessable_entity)
          expect(flash[:error]).to include('Titulo não pode ficar em branco')
      end
      it 'com arquivo faltando' do
        post documentos_url, params: { documento: { titulo: documento.titulo,
                                                    arquivo: nil,
                                                    usuario_id: usuario.id }

        }
        expect(response).to have_http_status(:unprocessable_entity)
        expect(flash[:error]).to include('Arquivo não pode ficar em branco')
      end
      it 'usuário faltando' do
        post documentos_url, params: { documento: { titulo: documento.titulo,
                                                    arquivo: fixture_file_upload('dummy.xml', 'text/xml'),
                                                    usuario_id: nil }

        }
        expect(response).to have_http_status(:unprocessable_entity)
        expect(flash[:error]).to include('Usuario é obrigatório(a)')
      end
    end
  end

  describe 'PUT #update' do
    before do
      documento
      documento_valido
    end
    context 'quando atualizados com validade' do
      it 'com todos os campos' do
        patch documento_path(documento), params: { documento: { titulo: documento.titulo,
                                                              arquivo: fixture_file_upload('dummy.xml', 'text/xml')
        }}

        expect(response).to redirect_to(documento_url(Documento.last))
        expect(flash[:success]).to include('Documento foi editado com sucesso')
      end
    end
    context 'quando os campos estão faltando' do
      it 'titulo faltando' do
        patch documento_path(documento), params: { documento: { titulo: nil}}

        expect(response).to have_http_status(:unprocessable_entity)
        expect(flash[:error]).to include('Titulo não pode ficar em branco')
      end
      it 'arquivo faltando' do
        patch documento_path(documento), params: { documento: { arquivo: nil}}

        expect(response).to have_http_status(:unprocessable_entity)
        expect(flash[:error]).to include('Arquivo não pode ficar em branco')
      end
    end
    context 'quando os campos são inválidos' do
      it 'arquivo com formato diferente de xml' do
        patch documento_path(documento), params: { documento: { arquivo: fixture_file_upload('dummy.txt', 'plain/text')}}

        expect(response).to have_http_status(:unprocessable_entity)
        expect(flash[:error]).to include('Arquivo não é arquivo no formato XML')
      end
    end
  end
end



